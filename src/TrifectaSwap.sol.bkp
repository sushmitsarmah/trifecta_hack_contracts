// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "openzeppelin-contracts/contracts/access/Ownable.sol";
import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import { UniversalRouter } from "universal-router/contracts/UniversalRouter.sol";
import { Commands } from "universal-router/contracts/libraries/Commands.sol";
import { IPoolManager } from "v4-core/src/interfaces/IPoolManager.sol";
import { IV4Router } from "v4-periphery/src/interfaces/IV4Router.sol";
import { Actions } from "v4-periphery/src/libraries/Actions.sol";
import { IPermit2 } from "permit2/src/interfaces/IPermit2.sol";
import { IHooks } from "v4-core/src/interfaces/IHooks.sol";
import { IERC20 } from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import { PoolKey } from "v4-core/src/types/PoolKey.sol";
import { Currency, CurrencyLibrary } from "v4-core/src/types/Currency.sol";

// Define IWETH9 interface
interface IWETH9 is IERC20 {
    function deposit() external payable;
    function withdraw(uint) external;
}

contract TrifectaSwap is Ownable {
    using CurrencyLibrary for Currency;
    
    UniversalRouter public immutable router;
    IPoolManager public immutable poolManager;
    IPermit2 public immutable permit2;
    IWETH9 public immutable WETH9;
    
    constructor(
        address payable _router, 
        address _poolManager, 
        address _permit2,
        address _weth9
    ) Ownable(msg.sender) {
        router = UniversalRouter(_router);
        poolManager = IPoolManager(_poolManager);
        permit2 = IPermit2(_permit2);
        WETH9 = IWETH9(_weth9);
    }
    
    function approveTokenWithPermit2(
        address token,
        uint160 amount,
        uint48 expiration
    ) external {
        IERC20(token).approve(address(permit2), type(uint256).max);
        permit2.approve(token, address(router), amount, expiration);
    }
    
    function swapExactInputSingle(
        PoolKey memory key, // PoolKey struct that identifies the v4 pool
        uint128 amountIn, // Exact amount of tokens to swap
        uint128 minAmountOut, // Minimum amount of output tokens expected
        uint256 deadline // Timestamp after which the transaction will revert
    ) external returns (uint256 amountOut) {
        // Encode the Universal Router command
        bytes memory command = abi.encodePacked(uint8(Commands.V4_SWAP));
        bytes[] memory inputs = new bytes[](1);
        
        // Encode V4Router actions
        bytes memory actions = abi.encodePacked(
            uint8(Actions.SWAP_EXACT_IN_SINGLE),
            uint8(Actions.SETTLE_ALL),
            uint8(Actions.TAKE_ALL)
        );
        
        // Prepare parameters for each action
        bytes[] memory params = new bytes[](3);

        PoolKey memory poolKey = PoolKey({
            currency0: key.currency0,
            currency1: key.currency1,
            fee: key.fee,
            tickSpacing: key.tickSpacing,
            hooks: key.hooks
        });
        
        // Extract parameters from key for direct encoding
        params[0] = abi.encode(
            IV4Router.ExactInputSingleParams({
                // Build the IV4Router.PoolKey struct directly in the argument
                poolKey: poolKey,
                zeroForOne: true,
                amountIn: amountIn,
                amountOutMinimum: minAmountOut,
                hookData: bytes("")
            })
        );
        
        params[1] = abi.encode(key.currency0, amountIn);
        params[2] = abi.encode(key.currency1, minAmountOut);
        
        // Combine actions and params into inputs
        inputs[0] = abi.encode(actions, params);
        
        // Execute the swap
        router.execute(command, inputs, deadline);
        
        // Get the token address from Currency
        address tokenAddress;
        if (Currency.unwrap(key.currency1) == address(0)) {
            // Handle native ETH case
            tokenAddress = address(WETH9);
        } else {
            // Handle ERC20 case
            tokenAddress = Currency.unwrap(key.currency1);
        }
        
        // Verify and return the output amount
        amountOut = IERC20(tokenAddress).balanceOf(address(this));
        require(amountOut >= minAmountOut, "Insufficient output amount");
        return amountOut;
    }
}